ВОПРОС:
<div>
<h2> What is the output of the following C++ program? </h2>
</div>
<pre><code class="language-cpp">
#include <iostream>
using namespace std;
 
template <int N>
class A {
     int arr[N];
  public:
        virtual void fun() { cout << "A::fun()"; }
};
 
class B : public A<2> {
  public:
       void fun() { cout << "B::fun()"; }
};
 
class C : public B { };
 
int main() {
     A<2> *a = new C;
        a->fun();
           return 0;
}
</code></pre>

ОТВЕТЫ:
<br>1) B::fun()
<br>2) A::fun()
<br>3) compile error

<br>
<br>
ПРАВИЛЬНЫЙ ОТВЕТ:
1


<br> <br>
ОТВЕТ РАЗВЕРНУТЫЙ:
<p>In general, the purpose of using templates in C++ is to avoid code redundancy.  We create generic classes (or functions) that can be used for any datatype as long as logic is identical. Datatype becomes a parameter and an instance of class/function is created at compile time when a data type is passed. C++ Templates also allow nontype (a parameter that represents a value, not a datatype) things as parameters.</p>
<p>In the above program, there is a generic class A which takes a nontype parameter N. The class B inherits from an instance of generic class A. The value of N for this instance of A is 2. The class B overrides fun() of class A<2>. The class C inherits from B. In main(), there is a pointer ‘a’ of type A<2> that points to an instance of C. When ‘a->fun()’ is called, the function of class B is executed because fun() is virtual and virtual functions are called according to the actual object, not according to pointer. In class C, there is no function ‘fun()’, so it is looked up in the hierarchy and found in class B.</p>

<br>
<a href="http://www.geeksforgeeks.org/">Source</a>
